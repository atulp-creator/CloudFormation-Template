AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Service + CodeBuild + CodePipeline for ECS rolling-update deployments (no ALB)

Parameters:
  ClusterName:
    Type: String
    Default: procur-stg-ecs-cluster
  AppName:
    Type: String
    Description: The application name (e.g., app, call, user)
  ContainerName:
    Type: String
  ImageTag:
    Type: String
  ServiceName:
    Type: String
    Default: app-service
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
  GitHubOwner:
    Type: String
    Default: githubusername
  GitHubRepo:
    Type: String
    Default: app
  GitHubBranch:
    Type: String
    Default: main
  GitHubConnectionArn:
    Type: String

Resources:

  # ===== SSM Parameters =====
  ServiceNameParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/procur/test/${AppName}/SERVICE_NAME"
      Type: String
      Value: !Ref ServiceName

  ContainerNameParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/procur/test/${AppName}/CONTAINER_NAME"
      Type: String
      Value: !Ref ContainerName

  ImageTagParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/procur/test/${AppName}/IMAGE_TAG"
      Type: String
      Value: !Ref ImageTag

  # ===== Artifact Bucket =====
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-artifactbucket"
    DeletionPolicy: Retain

  # ===== IAM Roles =====
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ServiceName}-CodeBuildRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        - PolicyName: CodeBuildExtendedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: S3ArtifactAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - !Sub "arn:aws:s3:::${ArtifactBucket}"
                  - !Sub "arn:aws:s3:::${ArtifactBucket}/*"
              - Sid: CodeBuildECSAccess
                Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Sid: TaskDefinitionAccess
                Effect: Allow
                Action:
                  - ecs:RegisterTaskDefinition
                  - ecs:DescribeTaskDefinition
                Resource: "*"
              - Sid: PassRolePolicy
                Effect: Allow
                Action: iam:PassRole
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/codebuild-service-role"
                Condition:
                  StringLike:
                    iam:PassedToService:
                      - ecs-tasks.amazonaws.com
                      - codebuild.amazonaws.com
              - Sid: SSMParameterAccess
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: 
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/procur/test/shared/*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/procur/test/${AppName}/*" 

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ServiceName}-PipelineRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
      Policies:
        - PolicyName: CodePipelineExtendedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CodeStarConnectionAccess
                Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Ref GitHubConnectionArn
              - Sid: S3ArtifactAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - !Sub "arn:aws:s3:::${ArtifactBucket}"
                  - !Sub "arn:aws:s3:::${ArtifactBucket}/*"
              - Sid: ECSIntegrationsManagementPolicy
                Effect: Allow
                Action:
                  - ecs:*
                  - application-autoscaling:Describe*
                  - application-autoscaling:PutScalingPolicy
                  - application-autoscaling:RegisterScalableTarget
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:PutMetricAlarm
                  - codedeploy:*
                  - ec2:Describe*
                  - servicediscovery:*
                  - logs:*
                  - events:*
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - iam:PassRole
                  - iam:CreateServiceLinkedRole
                Resource: "*"

  # ===== ECS Task Definition =====
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AppName}-taskdef"
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      ContainerDefinitions:
        - Name: !Ref ContainerName
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppName}:${ImageTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 80

  # ===== ECS Service (no ALB) =====
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ClusterName
      ServiceName: !Ref ServiceName
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentController:
        Type: ECS
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref Subnets
          SecurityGroups:
            - !Ref SecurityGroupId

  # ===== CodeBuild Project =====
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ServiceName}-build"
      Source:
        Type: CODEPIPELINE
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn

  # ===== CodePipeline =====
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${ServiceName}-pipeline"
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Sub "${GitHubOwner}/${GitHubRepo}"
                BranchName: !Ref GitHubBranch
                DetectChanges: true
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName: !Ref ClusterName
                ServiceName: !Ref ServiceName
                FileName: imagedefinitions.json
              RunOrder: 1

Outputs:
  ECSServiceName:
    Value: !Ref ECSService
    Export:
      Name: !Sub "${AWS::StackName}-ECSServiceName"
  CodePipelineName:
    Value: !Ref CodePipeline
    Export:
      Name: !Sub "${AWS::StackName}-CodePipelineName"
  CodeBuildRoleArn:
    Value: !GetAtt CodeBuildServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CodeBuildRoleArn"
  CodePipelineRoleArn:
    Value: !GetAtt CodePipelineRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CodePipelineRoleArn"
  ArtifactBucketName:
    Value: !Ref ArtifactBucket
    Export:
      Name: !Sub "${AWS::StackName}-ArtifactBucket"
  TaskDefinitionArn:
    Value: !Ref ECSTaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-TaskDefinitionArn"
